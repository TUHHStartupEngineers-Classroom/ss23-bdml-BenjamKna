

---
title: "Challenge 6 "
author: "Benjamin Knaack"
date: "`r Sys.Date()`"
output: html_document
---





```{r echo=TRUE, eval=FALSE}

# perform local interpretations of ML models with lime

# LIME FEATURE EXPLANATION ----

# 1. Setup ----

# Load Libraries 

library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)

# Load Data
employee_attrition_tbl <- read_csv("datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv")
definitions_raw_tbl    <- read_excel("data_definitions.xlsx", sheet = 1, col_names = FALSE)

# Processing Pipeline
source("data_processing_pipeline.R")

employee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)

# Split into test and train
set.seed(seed = 1113)
split_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)

# Assign training and test data
train_readable_tbl <- training(split_obj)
test_readable_tbl  <- testing(split_obj)

# ML Preprocessing Recipe 
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
  step_zv(all_predictors()) %>%
  step_mutate_at(c("JobLevel", "StockOptionLevel"), fn = as.factor) %>% 
  prep()

recipe_obj

train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)

# 2. Models ----

h2o.init()

automl_leader <- h2o.loadModel("04_Modeling/h20_models/StackedEnsemble_AllModels_3_AutoML_19_20230521_123133")
automl_leader


# 3. LIME ----

# 3.1 Making Predictions ----

predictions_tbl <- automl_leader %>% h2o.predict(newdata = as.h2o(test_tbl)) %>%
  as.tibble() %>%
  bind_cols(
    test_tbl %>%
      select(Attrition, EmployeeNumber)
  )

predictions_tbl
## # A tibble: 220 x 5
##    predict    No    Yes Attrition EmployeeNumber
##    <fct>   <dbl>  <dbl> <fct>              <dbl>
##  1 Yes     0.363 0.637  Yes                    1
##  2 No      0.863 0.137  No                    15
##  3 No      0.963 0.0374 No                    20
##  4 No      0.868 0.132  No                    21
##  5 No      0.952 0.0483 No                    38
##  6 No      0.808 0.192  No                    49
##  7 No      0.930 0.0696 No                    54
##  8 Yes     0.559 0.441  No                    61
##  9 Yes     0.412 0.588  No                    62
## 10 No      0.936 0.0640 No                    70
## # … with 210 more rows





test_tbl %>%
  slice(2) %>%
  glimpse()


# LIME is used to determine which features contribute to the prediction (& by how much) for a single observation



# 3.2 Single Explanation ----

explainer <- train_tbl %>%
  select(-Attrition) %>%
  lime(
    model           = automl_leader,
    bin_continuous  = TRUE,
    n_bins          = 4,
    quantile_bins   = TRUE
  )

explainer



?lime::explain

explanation <- test_tbl %>%
  slice(9) %>%
  select(-Attrition) %>%
  lime::explain(
    
    # Pass our explainer object
    explainer = explainer,
    # Because it is a binary classification model: 1
    n_labels   = 1,
    # number of features to be returned
    n_features = 8,
    # number of localized linear models
    n_permutations = 5000,
    # Let's start with 1
    kernel_width   = 1
  )

explanation


explanation %>%
  as.tibble() %>%
  select(feature:prediction)





g <- plot_features(explanation = explanation, ncol = 1)

g



```




### Part 1: Due to the hint the function my_plot_features() is built up from code snippets from Thomas Pedersens’ github page... So the function is kind of the same, but less robust.


```{r echo=TRUE, eval=FALSE}
#explanation$feature_value
#explanation$feature_weight
#explanation$feature
#explanation$feature_desc
#explanation$label_prob[1] # round
#unique(format(explanation$label_prob, digits = 2)) # Probability
#unique(format(explanation$label, digits = 2)) # Label
#unique(format(explanation$model_r2, digits = 2)) # Explanation Fit



my_plot_features <- function(explanation){

type_pal <- c('Supports', 'Contradicts')
explanation$probability <- format(explanation$label_prob, digits = 2)
explanation$label <- factor(explanation$label, unique(explanation$label[order(explanation$label_prob, decreasing = TRUE)]))
explanation$type <- factor(ifelse(sign(explanation$feature_weight) == 1, type_pal[1], type_pal[2]), levels = type_pal)
description <- paste0(explanation$case, '_', explanation[['label']])
desc_width <- max(nchar(description)) + 1
description <- paste0(format(description, width = desc_width), explanation$feature_desc)
explanation$description <- factor(description, levels = description[order(abs(explanation$feature_weight))])
explanation$case <- factor(explanation$case, unique(explanation$case))
explanation$Explanation_fit <- format(explanation$model_r2, digits = 2)


label_helper_fct <- function(labels, multi_line = TRUE, sep = ': ') {
  names(labels) <- tools::toTitleCase(names(labels))
  label_both(labels, multi_line, sep)
}



ggplot(explanation) +
  facet_wrap(~ case + label + probability + Explanation_fit,labeller = label_helper_fct ,scales = 'free_y', ncol = 1)+
  geom_col(aes_(~description, ~feature_weight, fill = ~type)) +
  coord_flip() +
  scale_fill_manual(values = c('steelblue', 'firebrick'), drop = FALSE) +
  scale_x_discrete(labels = function(lab) substr(lab, desc_width + 1, nchar(lab))) +
  labs(y = 'Weight', x = 'Feature', fill = '')+
  theme(
    strip.text = element_text(face = 'bold', size = 10),
    plot.margin = margin(15, 15, 15, 15),
    legend.background = element_blank(),
    legend.key = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.ticks = element_blank(),
    legend.position = 'bottom',
    panel.spacing.y = unit(15, 'pt'),
    strip.text.x = element_text(margin = margin(t = 2, b = 2), hjust = 0),
    axis.title.y = element_text(margin = margin(r = 15)),
    axis.title.x = element_text(margin = margin(t = 10))
  )


}



explanation %>% 
  as.tibble()

case_1 <- explanation %>%
  filter(case == 1)

case_1

my_plot_features(case_1)


```
![](part1_chal6.png)




### Part 2: This is basically the function from the source code of the lime library on github.
I hope this is in accordance with the task... I dont see the point of further changing lines of code or renaming variables to make it look like mine.

```{r echo=TRUE, eval=FALSE}

# 3.3 Multiple Explanations ----

explanation <- test_tbl %>%
  slice(1:20) %>%
  select(-Attrition) %>%
  lime::explain(
    explainer = explainer,
    n_labels   = 1,
    n_features = 8,
    n_permutations = 5000,
    kernel_width   = 0.5
  )

explanation %>%
  as.tibble()

plot_features(explanation, ncol = 4)




plot_explanations(explanation)

```



### my_plot_explanations
```{r echo=TRUE, eval=FALSE}

my_plot_explanations <- function(explanation = NULL) {
  
  num_cases <- unique(suppressWarnings(as.numeric(explanation$case)))
  
  
  
  if (!anyNA(num_cases)) {
    explanation$case <- factor(explanation$case, levels = as.character(sort(num_cases)))
  }
  
  explanation$feature_desc <- factor(
    explanation$feature_desc,
    levels = rev(unique(explanation$feature_desc[order(explanation$feature, explanation$feature_value)]))
  )
  
  
  
  ggplot(explanation, aes_(~case, ~feature_desc)) +
    
    geom_tile(aes_(fill = ~feature_weight)) +
    
    scale_x_discrete('Case', expand = c(0, 0)) +
    
    scale_y_discrete('Feature', expand = c(0, 0)) +
    
    scale_fill_gradient2('Feature\nweight', low = 'green', mid = '#f7f7f7', high = 'steelblue') +
    
    theme(
      strip.text = element_text(face = 'bold', size = 10),
      plot.margin = margin(15, 15, 15, 15),
      legend.background = element_blank(),
      legend.key = element_blank(),
      panel.grid.major.y = element_blank(),
      panel.grid.minor.y = element_blank(),
      axis.ticks = element_blank(),
      legend.position = 'bottom',
      panel.spacing.y = unit(15, 'pt'),
      strip.text.x = element_text(margin = margin(t = 2, b = 2), hjust = 0),
      axis.title.y = element_text(margin = margin(r = 15)),
      axis.title.x = element_text(margin = margin(t = 10))
    ) +

    theme(panel.border = element_rect(fill = NA, colour = 'grey60', size = 1),
          panel.grid = element_blank(),
          legend.position = 'right',
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  facet_wrap(~label)
}


my_plot_explanations(explanation)



```

![](part2_chal6.png)
