{
  "hash": "318e6bc248b9743f61e561a88e1b3814",
  "result": {
    "markdown": "---\ntitle: \"Challenge 1 \"\nauthor: \"Benjamin Knaack\"\ndate: \"2023-05-11\"\noutput: html_document\n---\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-1_e2e20c91246585507a3ecd42d4d1e156'}\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"symbol\"   \"date\"     \"open\"     \"high\"     \"low\"      \"close\"    \"volume\"  \n#> [8] \"adjusted\"\n```\n:::\n:::\n\n### QUESTION: Which stocks behave similarly?\n\n\n##### Step 1 - Convert stock prices to a standardized format (daily returns)\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-2_244fc14ea267e9f95219eb16ae993505'}\n\n```{.r .cell-code}\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n                select(symbol,date,adjusted) %>%\n                filter(lubridate::year(date) >= 2018) %>%\n                group_by(symbol) %>%\n                mutate(lagged_price = lag(adjusted, n = 1)) %>%\n                na.omit() %>%# filter(!is.na(.))\n                mutate(diff_adj_lag = adjusted -lagged_price) %>%\n                mutate(pct_return = diff_adj_lag/lagged_price) %>%\n                select(symbol,date,pct_return) %>%\n                print(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 141,340 × 3\n#> # Groups:   symbol [502]\n#>    symbol date       pct_return\n#>    <chr>  <date>          <dbl>\n#>  1 MSFT   2018-01-03   0.00465 \n#>  2 MSFT   2018-01-04   0.00880 \n#>  3 MSFT   2018-01-05   0.0124  \n#>  4 MSFT   2018-01-08   0.00102 \n#>  5 MSFT   2018-01-09  -0.000680\n#>  6 MSFT   2018-01-10  -0.00453 \n#>  7 MSFT   2018-01-11   0.00296 \n#>  8 MSFT   2018-01-12   0.0173  \n#>  9 MSFT   2018-01-16  -0.0140  \n#> 10 MSFT   2018-01-17   0.0203  \n#> # ℹ 141,330 more rows\n```\n:::\n:::\n\n\n\n##### Step 2 - Convert to User-Item Format\n\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-3_a3d36d5ac3d6199fbf1c2f8fa32ffb88'}\n\n```{.r .cell-code}\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n                pivot_wider(names_from = date, values_from = pct_return, values_fill = 0) %>%\n                ungroup() %>%\n                print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 502 × 283\n#>    symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n#>    <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n#>  1 MSFT       0.00465     0.00880       0.0124        0.00102    -0.000680\n#>  2 AAPL      -0.000174    0.00465       0.0114       -0.00371    -0.000115\n#>  3 AMZN       0.0128      0.00448       0.0162        0.0144      0.00468 \n#>  4 FB         0.0179     -0.00184       0.0137        0.00765    -0.00218 \n#>  5 JNJ        0.00955    -0.0000712     0.00825       0.00127     0.0159  \n#>  6 JPM        0.00102     0.0143       -0.00642       0.00148     0.00507 \n#>  7 GOOG       0.0164      0.00362       0.0146        0.00427    -0.000614\n#>  8 GOOGL      0.0171      0.00388       0.0133        0.00353    -0.00127 \n#>  9 XOM        0.0196      0.00138      -0.000806      0.00450    -0.00425 \n#> 10 BAC       -0.00334     0.0131        0.00464      -0.00692     0.00498 \n#> # ℹ 492 more rows\n#> # ℹ 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#> #   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#> #   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#> #   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#> #   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#> #   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, …\n```\n:::\n:::\n\n\n##### Step 3 - Perform K-Means Clustering\n\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-4_9cbb9e0bf6c60038226805e2e370a5db'}\n\n```{.r .cell-code}\nkmeans_obj <- stock_date_matrix_tbl %>%\n                select(-symbol) %>%\n                kmeans(centers = 4, nstart = 20)\n\nkmeans_obj %>% glance() %>% select(tot.withinss)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"tot.withinss\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"29.20555\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n##### Step 4 - Find the optimal value of K\n\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-5_43d69d4e1a2383260f419bc47ca8b047'}\n\n```{.r .cell-code}\nkmeans_mapper <- function(center = 3) {\n  stock_date_matrix_tbl %>%\n    select(-symbol) %>%\n    kmeans(centers = center, nstart = 20)\n}\n\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = map(centers, kmeans_mapper)) %>%\n  mutate(glance = map(k_means, glance))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: There was 1 warning in `mutate()`.\n#> ℹ In argument: `k_means = map(centers, kmeans_mapper)`.\n#> Caused by warning:\n#> ! did not converge in 10 iterations\n```\n:::\n\n```{.r .cell-code}\nk_means_mapped_tbl %>%\n  unnest(glance) %>%\n  select(centers, tot.withinss) %>%\n  \n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#3f518f\", size = 2) +\n  geom_line(color = \"#3f518f\", size = 1) +\n  labs(title = \"Skree Plot\", \n       caption = \"We can see that the Scree Plot becomes linear between 5 and 10 centers for K.\")+\n  scale_x_continuous(n.breaks = 15) +\n  scale_y_continuous(n.breaks = 15) +\n  \n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\"),\n    plot.caption = element_text(face = \"bold.italic\", size = 8),\n    panel.grid.major = element_line(size = 0.5),\n    panel.grid.minor = element_line(size = 0.5),\n    axis.text = element_text(angle = 45, hjust = 1, face = \"bold\", size = 8),\n    axis.title = element_text(face = \"bold\")\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](01_challenge_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#kmeans_obj$cluster\n```\n:::\n\n\n\n\n##### Step 5 - Apply UMAP\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-6_a2c356f51bdab7492f8453eec34aaf2e'}\n\n```{.r .cell-code}\numap_results <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  umap()\n  \numap_results_tbl <- umap_results$layout %>% \n  as_tibble() %>%\n # set_names(c(\"x\", \"y\")) %>%.      #.name_repair = \"unique\"\n  bind_cols(stock_date_matrix_tbl %>% select(symbol))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#> `.name_repair` is omitted as of tibble 2.0.0.\n#> ℹ Using compatibility `.name_repair`.\n```\n:::\n\n```{.r .cell-code}\numap_results_tbl %>% ggplot(aes(V1, V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() + \n  labs(title = \"UMAP Projection\")\n```\n\n::: {.cell-output-display}\n![](01_challenge_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n##### Step 6 - Combine K-Means and UMAP\n\n\n\n::: {.cell hash='01_challenge_cache/html/unnamed-chunk-7_86d97dac6f8d60953f957282c68e71db'}\n\n```{.r .cell-code}\nk_means_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 10, nstart = 20)\n\numap_kmeans_results_tbl <- k_means_obj %>% \n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster) %>%\n  left_join(umap_results_tbl, by =\"symbol\") %>%\n  left_join(sp_500_index_tbl %>% select(symbol, company, sector),by=\"symbol\")\n\n\numap_kmeans_results_tbl %>% ggplot(aes(V1,V2,color= .cluster)) +\n  geom_point(alpha = 0.65,size = 2) +\n  viridis::scale_color_viridis(discrete = TRUE) +\n  theme_linedraw() +\n  labs(title = \"Combined K-Means and UMAP results\") +\n  theme(plot.title = element_text(face = \"bold\")) \n```\n\n::: {.cell-output-display}\n![](01_challenge_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggplot_obje <- ggplotly(ggplot_obje, tooltip = c(\".cluster\"))\n#ggplot_obje doesn't work\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}